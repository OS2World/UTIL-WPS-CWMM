
/*
 * This file was generated by the SOM Compiler.
 * FileName: include\cwmmdisk.ih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitih: 2.42
 */

/*
 * 
 * CWdisk.idl:
 * 
 * 
 */


/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_CWMMDisk_ih
#define SOM_CWMMDisk_ih

#pragma checkout(suspend)

#include <cwmmdisk.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
  #define SOM_Scope extern "C"
#else
  #define SOM_Scope extern
#endif  /* __cplusplus */
#endif  /* SOM_Scope */

#ifndef SOM_CurrentClass
    #define SOM_CurrentClass CWMMDiskCClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define CWMMDisk_MaxNoMethods 0

/*
 * -- Instance data
 */
typedef void CWMMDiskData;

/*
 * This class introduces no instance data, so no GetData macro is provided
 */

/*
 * Primary Implementation File Support
 */
#if (defined(CWMMDisk_Class_Source) || defined(SOM_Module_cwmmdisk_Source))

/*
 * Trace/Debug macro
 */
#ifndef CWMMDiskMethodDebug
   #define CWMMDiskMethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* CWMMDiskMethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_CWMMDiskCClassData.parentMtab
#undef SOMInstance
#define SOMInstance CWMMDiskCClassData.parentMtab

#ifndef M_CWMMDisk_Class_Source
   #define M_CWMMDisk_Class_Source
#endif    /* M_CWMMDisk_Class_Source */

/*
 * Overridden method: wpViewObject
 */
#pragma linkage(cwmmdisk_wpViewObject, system)
SOM_Scope HWND  SOMLINK cwmmdisk_wpViewObject(CWMMDisk *somSelf,
		HWND hwndCnr,
		ULONG ulView,
		ULONG param);
static char *somMN_CWMMDiskwpViewObject = "WPObject::wpViewObject";
static somId somId_CWMMDiskwpViewObject = &somMN_CWMMDiskwpViewObject;
#ifdef somId_wpViewObject
#undef somId_wpViewObject
#else
#define somId_wpViewObject somId_CWMMDiskwpViewObject
#endif
static somMethodProc* CWMMDisk_parent_WPDisk_wpViewObject_resolved;
#define CWMMDisk_parent_WPDisk_wpViewObject(somSelf,hwndCnr,ulView,param) \
  ((( somTD_WPObject_wpViewObject ) \
    CWMMDisk_parent_WPDisk_wpViewObject_resolved) \
	 (somSelf,hwndCnr,ulView,param))
#ifndef SOMGD_pmc_WPDisk_wpViewObject
  #ifdef parent_WPDisk_wpViewObject
     #undef parent_WPDisk_wpViewObject
     #define SOMGD_pmc_WPDisk_wpViewObject 1
  #else
     #define parent_WPDisk_wpViewObject CWMMDisk_parent_WPDisk_wpViewObject
  #endif /* parent_WPDisk_wpViewObject */
#endif /* SOMGD_pmc_WPDisk_wpViewObject */
#ifndef parent_wpViewObject
     #define parent_wpViewObject CWMMDisk_parent_WPDisk_wpViewObject
#endif  /* parent_wpViewObject */
#define CWMMDisk_parents_wpViewObject(somSelf,hwndCnr,ulView,param) (\
   CWMMDisk_parent_WPDisk_wpViewObject(somSelf,hwndCnr,ulView,param))

/*
 * Initialize the class data structure
 */
SOMEXTERN struct CWMMDiskClassDataStructure SOMDLINK CWMMDiskClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
SOMEXTERN struct CWMMDiskCClassDataStructure SOMDLINK CWMMDiskCClassData = {(somMethodTabs) NULL};

/*
 * Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t CWMMDiskOM[] = {
    {    &somId_CWMMDiskwpViewObject,
         (somMethodProc *) cwmmdisk_wpViewObject    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_CWMMDisk = "CWMMDisk";
#ifndef somEMC_M_CWMMDisk_defined
#define somEMC_M_CWMMDisk_defined
static char * somEMC_M_CWMMDisk = "M_CWMMDisk";
#endif
static char * somPCN_CWMMDisk_WPDisk = "WPDisk";

static somId somPCCWMMDisk[] = {
    &somPCN_CWMMDisk_WPDisk,
};

static somStaticClassInfo CWMMDiskSCI = {
    4, 0, 1, 0, 0, 0,
    CWMMDisk_MajorVersion, CWMMDisk_MinorVersion,
    0, CWMMDisk_MaxNoMethods, 1,
    &somCN_CWMMDisk,
    &somEMC_M_CWMMDisk, 0,
    somPCCWMMDisk,
    (somClassDataStructure *) &CWMMDiskClassData,
    (somCClassDataStructure *) &CWMMDiskCClassData,
    (somStaticMethod_t *) NULL, CWMMDiskOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* type code alignment */
    -1, /* use parents as directinitclasses */
    0, /* no explicit directinitclasses */
    0, /* number of general method entries */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no entry names provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK CWMMDiskNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    WPDiskNewClass(WPDisk_MajorVersion,WPDisk_MinorVersion);	/* static reference */
    /* Explicit metaclass, so get it */ 
    M_CWMMDiskNewClass(M_CWMMDisk_MajorVersion,M_CWMMDisk_MinorVersion);	/* static reference */
    result = somBuildClass(1,&CWMMDiskSCI, somtmajorVersion, somtminorVersion);
    CWMMDisk_parent_WPDisk_wpViewObject_resolved = 
	somParentNumResolve(CWMMDiskCClassData.parentMtab, 1, WPObjectClassData.wpViewObject); 
    return result;
}

/*
 * Functions for attributes.
 */

#endif /* Primary Implementation Support */
#pragma checkout(resume)

#endif       /* SOM_CWMMDisk_ih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_M_CWMMDisk_ih
#define SOM_M_CWMMDisk_ih

#pragma checkout(suspend)

#include <cwmmdisk.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
  #define SOM_Scope extern "C"
#else
  #define SOM_Scope extern
#endif  /* __cplusplus */
#endif  /* SOM_Scope */

#ifndef SOM_CurrentClass
    #define SOM_CurrentClass M_CWMMDiskCClassData.parentMtab
#endif  /* SOM_CurrentClass */

#define M_CWMMDisk_MaxNoMethods 0

/*
 * -- Instance data
 */
typedef void M_CWMMDiskData;

/*
 * This class introduces no instance data, so no GetData macro is provided
 */

/*
 * Primary Implementation File Support
 */
#if (defined(CWMMDisk_Class_Source) || defined(M_CWMMDisk_Class_Source) || defined(SOM_Module_cwmmdisk_Source))

/*
 * Trace/Debug macro
 */
#ifndef M_CWMMDiskMethodDebug
   #define M_CWMMDiskMethodDebug(c,m) SOMMethodDebug(c,m)
#endif  /* M_CWMMDiskMethodDebug */

/*
 * Current class macros for Instance and Meta classes.
 */

/*
 * Overridden method: wpclsQueryTitle
 */
#pragma linkage(cwmmdiskM_wpclsQueryTitle, system)
SOM_Scope PSZ  SOMLINK cwmmdiskM_wpclsQueryTitle(M_CWMMDisk *somSelf);
static char *somMN_M_CWMMDiskwpclsQueryTitle = "M_WPObject::wpclsQueryTitle";
static somId somId_M_CWMMDiskwpclsQueryTitle = &somMN_M_CWMMDiskwpclsQueryTitle;
#ifdef somId_wpclsQueryTitle
#undef somId_wpclsQueryTitle
#else
#define somId_wpclsQueryTitle somId_M_CWMMDiskwpclsQueryTitle
#endif
static somMethodProc* M_CWMMDisk_parent_M_WPDisk_wpclsQueryTitle_resolved;
#define M_CWMMDisk_parent_M_WPDisk_wpclsQueryTitle(somSelf) \
  ((( somTD_M_WPObject_wpclsQueryTitle ) \
    M_CWMMDisk_parent_M_WPDisk_wpclsQueryTitle_resolved) \
	 (somSelf))
#ifndef SOMGD_pmc_M_WPDisk_wpclsQueryTitle
  #ifdef parent_M_WPDisk_wpclsQueryTitle
     #undef parent_M_WPDisk_wpclsQueryTitle
     #define SOMGD_pmc_M_WPDisk_wpclsQueryTitle 1
  #else
     #define parent_M_WPDisk_wpclsQueryTitle M_CWMMDisk_parent_M_WPDisk_wpclsQueryTitle
  #endif /* parent_M_WPDisk_wpclsQueryTitle */
#endif /* SOMGD_pmc_M_WPDisk_wpclsQueryTitle */
#ifndef parent_wpclsQueryTitle
     #define parent_wpclsQueryTitle M_CWMMDisk_parent_M_WPDisk_wpclsQueryTitle
#endif  /* parent_wpclsQueryTitle */
#define M_CWMMDisk_parents_wpclsQueryTitle(somSelf) (\
   M_CWMMDisk_parent_M_WPDisk_wpclsQueryTitle(somSelf))

/*
 * Initialize the class data structure
 */
SOMEXTERN struct M_CWMMDiskClassDataStructure SOMDLINK M_CWMMDiskClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
SOMEXTERN struct M_CWMMDiskCClassDataStructure SOMDLINK M_CWMMDiskCClassData = {(somMethodTabs) NULL};

/*
 * Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t M_CWMMDiskOM[] = {
    {    &somId_M_CWMMDiskwpclsQueryTitle,
         (somMethodProc *) cwmmdiskM_wpclsQueryTitle    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_M_CWMMDisk = "M_CWMMDisk";
static char * somPCN_M_CWMMDisk_M_WPDisk = "M_WPDisk";

static somId somPCM_CWMMDisk[] = {
    &somPCN_M_CWMMDisk_M_WPDisk,
};

static somStaticClassInfo M_CWMMDiskSCI = {
    4, 0, 1, 0, 0, 0,
    M_CWMMDisk_MajorVersion, M_CWMMDisk_MinorVersion,
    0, M_CWMMDisk_MaxNoMethods, 1,
    &somCN_M_CWMMDisk,
    (somId) NULL, 1,
    somPCM_CWMMDisk,
    (somClassDataStructure *) &M_CWMMDiskClassData,
    (somCClassDataStructure *) &M_CWMMDiskCClassData,
    (somStaticMethod_t *) NULL, M_CWMMDiskOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* type code alignment */
    -1, /* use parents as directinitclasses */
    0, /* no explicit directinitclasses */
    0, /* number of general method entries */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no entry names provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* used to identify a DTS class */
    0, /* used to register dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK M_CWMMDiskNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    M_WPDiskNewClass(M_WPDisk_MajorVersion,M_WPDisk_MinorVersion);	/* static reference */
    result = somBuildClass(1,&M_CWMMDiskSCI, somtmajorVersion, somtminorVersion);
    M_CWMMDisk_parent_M_WPDisk_wpclsQueryTitle_resolved = 
	somParentNumResolve(M_CWMMDiskCClassData.parentMtab, 1, M_WPObjectClassData.wpclsQueryTitle); 
    return result;
}

/*
 * Functions for attributes.
 */

#endif /* Primary Implementation Support */
#pragma checkout(resume)

#endif       /* SOM_M_CWMMDisk_ih */
